{"version":3,"sources":["components/employeecard/Employeecard.js","components/employeetable/Employeetable.js","App.js","serviceWorker.js","index.js"],"names":["Employeecard","id","imgSrc","this","props","className","name","type","exp","src","alt","Component","pokemonArray","desknumber","Employeetable","compareProps","a","b","comparison","handleReset","setState","pokemon","handleSort","sortedArray","state","slice","sort","search","event","filteredPokemon","filter","contact","toLowerCase","startsWith","target","value","onChange","updateSearch","bind","onClick","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9e9fa5dc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Employeecard.css';\n\nconst betterURL = (id) => {\n    if(id < 10) {\n        id = \"00\" +  id;\n    }\n    if(id >= 10 &&  id < 100) {\n        id = \"0\" + id;\n    }\n    return `https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${id}.png`;\n}\n\nclass Employeecard extends Component {\n    render(){\n        let imgSrc = `${betterURL(this.props.id)}`;\n        \n        return (\n            <div className=\"Pokecard\">\n                <h1 className=\"Pokecard-title\">Name: {this.props.name}</h1>\n                <h1 className=\"Pokecard-data\">Type: {this.props.type}</h1>\n                <h1 className=\"Pokecard-data\">Desk Number: {this.props.exp}</h1>\n                <img src={imgSrc} alt={this.props.name}/>\n            </div>\n        )\n    }\n}\n\nexport default Employeecard;\n// console.log(betterURL(this.props.id));","import React, { Component } from 'react'\nimport Employeecard from '../employeecard/Employeecard.js';\nimport \"./Employeetable.css\";\n\nconst pokemonArray = [\n    { id: 4, name: 'Charmander', type: 'fire', desknumber: 62 },\n    { id: 7, name: 'Squirtle', type: 'water', desknumber: 63 },\n    { id: 11, name: 'Metapod', type: 'bug', desknumber: 72 },\n    { id: 12, name: 'Butterfree', type: 'flying', desknumber: 178 },\n    { id: 25, name: 'Pikachu', type: 'electric', desknumber: 112 },\n    { id: 39, name: 'Jigglypuff', type: 'normal', desknumber: 95 },\n    { id: 94, name: 'Gengar', type: 'poison', desknumber: 225 },\n    { id: 133, name: 'Eevee', type: 'normal', desknumber: 65 }\n];\n\nclass Employeetable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            search: \"\",\n            pokemon: []\n        };\n    }\n\n    componentDidMount() {\n        this.setState({ pokemon: pokemonArray })\n    }\n\n    updateSearch(event) {\n        let filteredPokemon = pokemonArray.filter((contact) => {\n            return contact.name.toLowerCase().startsWith(event.target.value.toLowerCase());\n        })\n        this.setState({ pokemon: filteredPokemon });\n    }\n\n    compareProps = () => {\n        return (a, b) => {\n            let comparison = 0;\n            if (a.type > b.type) {\n                comparison = 1;\n            } else if (a.type < b.type) {\n                comparison = -1;\n            }\n            return comparison;\n        };\n    };\n\n    handleReset = () => {\n        this.setState({ pokemon: pokemonArray });\n    }\n\n    handleSort = () => {\n        let sortedArray = this.state.pokemon.slice().sort(this.compareProps());\n        this.setState({ pokemon: sortedArray });\n    };\n\n    render() {\n\n        return (\n            <div className=\"Pokedex\">\n                <h1 className=\"center\">Employee Directory</h1>\n                <div className=\"searchBar\">\n                    <label>Search: </label>\n                    <input className=\"center\" type=\"text\"\n                        onChange={this.updateSearch.bind(this)}\n                    />\n                    </div>\n                    <br></br>\n                    <div className=\"buttons\">\n                        <button onClick={this.handleSort}>Sort by Type</button>\n                        <button onClick={this.handleReset}>Reset Sort</button>\n                    </div>\n\n                <div className=\"Pokedex-cards\">\n                    {this.state.pokemon.map((contact) => {\n                        return <Employeecard id={contact.id} name={contact.name} type={contact.type} exp={contact.desknumber} key={contact.id} />\n                    })}\n                </div>\n            </div>\n        )\n\n    }\n}\n\nexport default Employeetable;\n\n// <div className=\"Pokedex-cards\">\n// {this.props.pokemon.map((p) => (\n//     <Employeecard id={p.id} name={p.name} type={p.type} exp={p.desknumber} />\n// ))}\n// </div>\n\n// event.target.value.substr(0, 20)\n// let sortedTypes = this.props.pokemon.filter(\n//     (contact) => {\n//         return contact.name.toLowerCase().indexOf(this.state.search) !== -1;\n//     }\n// );\n\n// let filteredContacts = this.props.pokemon.filter(\n//     (contact) => {\n//         return contact.name.toLowerCase().indexOf(this.state.search) !== -1;\n//     }\n// );\n// <label for=\"type\">Choose a type:</label>\n//                 <select name=\"type\" id=\"type\">\n//                     <option value=\"fire\">Fire</option>\n//                     <option value=\"water\">Water</option>\n//                     <option value=\"bug\">Bug</option>\n//                     <option value=\"flying\">Flying</option>\n//                     <option value=\"electric\">Electric</option>\n//                     <option value=\"normal\">Flying</option>\n//                     <option value=\"poison\">Poison</option>\n//                 </select>","import React, { Component } from 'react';\nimport Employeetable from './components/employeetable/Employeetable';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (<div className=\"App\">\n      <Employeetable />\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}